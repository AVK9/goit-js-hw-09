{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,UAAWC,SAASC,cAAc,iBAClCC,gBAAiBF,SAASC,cAAc,qBACxCE,eAAgBH,SAASC,cAAc,oBACvCG,YAAaJ,SAASC,cAAc,uBA2BtC,SAASI,EAAcC,EAAUC,GACjC,IAAMC,EAAgBC,KAAKC,SAAW,GACpC,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvBC,YAAW,WACLN,EACHI,EAAI,CAAEN,WAAUC,UAEdM,EAAI,CAAEP,WAAUC,S,GAElBA,E,IAjCPT,EAAKC,UAAUgB,iBAAiB,SAChC,SAAqBC,GACnBA,EAAIC,iBAMJ,IAJC,IAAMC,EAAapB,EAAKI,gBAAgBiB,MAClCC,EAAYtB,EAAKK,eAAegB,MAChCE,EAASvB,EAAKM,YAAYe,MAExBG,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAAG,CACnC,IAAMC,EAAWD,EACXE,EAAQC,OAAOP,GAAcI,EAAEG,OAAOL,GAIhDf,EAAckB,EAAUC,GACrBE,MAAK,SAAAC,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MACjBqB,EAAAhC,GAASiC,OAAOC,QAAQ,qBAAoCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAEnEyB,OAAM,SAAAL,G,IAAGrB,EAAQqB,EAARrB,SAAUC,EAAKoB,EAALpB,MAClBqB,EAAAhC,GAASiC,OAAOI,QAAQ,oBAAmCF,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst refs = {\n  submitBtn: document.querySelector(\"form > button\"),\n  inputFirstDelay: document.querySelector(\"input[name=delay]\"),\n  inputDelayStep: document.querySelector(\"input[name=step]\"),\n  inputAmount: document.querySelector(\"input[name=amount]\")\n};\n\nrefs.submitBtn.addEventListener('click', onInputForm);\nfunction onInputForm(evt) {\n  evt.preventDefault();\n  \n   const firstDelay = refs.inputFirstDelay.value;\n   const delayStep = refs.inputDelayStep.value;\n   const amount = refs.inputAmount.value;\n\n  for (let i = 1; i <= amount; i += 1) {\n    const position = i;\n    const delay = Number(firstDelay) + i*Number(delayStep);\n    // console.log(firstDelay);\n    // console.log(delayStep);\n\ncreatePromise(position, delay)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n  });\n  }\n};\n\nfunction createPromise(position, delay) {\nconst shouldResolve = Math.random() > 0.3;\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n       res({ position, delay });\n      } else {\n         rej({ position, delay });\n      }\n    }, delay)\n  })\n  };"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$refs","submitBtn","document","querySelector","inputFirstDelay","inputDelayStep","inputAmount","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","res","rej","setTimeout","addEventListener","evt","preventDefault","firstDelay","value","delayStep","amount","i","position1","delay1","Number","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.6e41d08b.js.map"}